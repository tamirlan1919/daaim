# handlers/ui_inline.py
from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton,
    LabeledPrice, PreCheckoutQuery
)
from datetime import datetime
from database.models import Order

from database.engine import AsyncSessionLocal
from database.repository import (
    get_user_by_telegram_id, create_user,
    get_orders_by_user, get_order_by_id, set_order_paid,
    get_orders_count_by_telegram_id, get_total_bottles_by_user,
)

router = Router()

WEBAPP_URL = "https://daim-web-zeta.vercel.app/products"
SUPPORT_URL = "https://t.me/veamogam"
CURRENCY = "RUB"
PROVIDER_TOKEN = "390540012:LIVE:73124"

def fmt_price(minor: int) -> str:
    rub = minor
    kop = minor % 100
    return f"{rub:,}".replace(",", " ") + f".{kop:02d} ‚ÇΩ"

def fmt_dt(dt: datetime) -> str:
    return dt.strftime("%d.%m.%Y %H:%M")

STATUS_LABELS = {
    "processing": "üöß –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
    "in_transit": "üöö –í –ø—É—Ç–∏",
    "declined":   "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω",
    "completed":  "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω",
}
def fmt_status(order) -> str:
    if not order.is_paid:
        return "‚è≥ –ù–µ –æ–ø–ª–∞—á–µ–Ω"
    return STATUS_LABELS.get(getattr(order, "status", None), "üöß –í –æ–±—Ä–∞–±–æ—Ç–∫–µ")

def order_card_text(o: Order) -> str:
    items_text = "\n".join(
        f"{it.quantity} √ó {it.product.name} ‚Äî {fmt_price(it.line_total_cents)}"
        for it in o.items
    )
    return (
        f"–ó–∞–∫–∞–∑ ‚Ññ{o.id}\n"
        f"–°—Ç–∞—Ç—É—Å: <b>{o.status.value}</b>\n"
        f"–û–ø–ª–∞—Ç–∞: {'‚úÖ' if o.is_paid else '‚ùå'}\n"
        f"–ê–¥—Ä–µ—Å: {o.address}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {o.phone}\n\n"
        f"–¢–æ–≤–∞—Ä—ã:\n{items_text}\n\n"
        f"–ò—Ç–æ–≥–æ: <b>{fmt_price(o.total_price_cents)}</b>"
    )

def menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥", web_app={"url": WEBAPP_URL}),
            InlineKeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã", callback_data="orders:list"),
        ],
        [
            InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="nav:profile"),
            InlineKeyboardButton(text="‚ùì FAQ", callback_data="nav:faq"),
        ],
        [InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_URL)],
    ])

def profile_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="orders:list"),
            InlineKeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥", web_app={"url": WEBAPP_URL}),
        ],
        [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="nav:menu")],
    ])

def orders_list_kb(orders) -> InlineKeyboardMarkup:
    rows = []
    for o in orders:
        label = f"‚Ññ{o.id} ‚Ä¢ {'–û–ø–ª–∞—á–µ–Ω' if o.is_paid else '–ù–µ –æ–ø–ª–∞—á–µ–Ω'} ‚Ä¢ {fmt_price(o.total_price_cents)}"
        rows.append([InlineKeyboardButton(text=label, callback_data=f"order:{o.id}")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="nav:menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def order_actions_kb(o) -> InlineKeyboardMarkup:
    rows = []
    if not o.is_paid:
        rows.append([InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data=f"pay:{o.id}")])
    rows.append([
        InlineKeyboardButton(text="üì¶ –ö —Å–ø–∏—Å–∫—É", callback_data="orders:list"),
        InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="nav:menu"),
    ])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def faq_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="nav:menu")]
    ])

async def send_or_edit(event: Message | CallbackQuery, text: str, kb: InlineKeyboardMarkup | None = None):
    if isinstance(event, Message):
        return await event.answer(text, reply_markup=kb, disable_web_page_preview=True)
    else:
        return await event.message.edit_text(text, reply_markup=kb, disable_web_page_preview=True)

@router.message(CommandStart())
async def start(message: Message):
    async with AsyncSessionLocal() as db:
        user = await get_user_by_telegram_id(db, message.from_user.id)
        if not user:
            await create_user(db, telegram_id=message.from_user.id, name=message.from_user.full_name)
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>Daim Coffee</b> ‚òï",
        reply_markup=menu_kb()
    )

@router.callback_query(F.data == "nav:menu")
async def nav_menu(cb: CallbackQuery):
    await cb.answer()
    await send_or_edit(cb, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", menu_kb())

@router.callback_query(F.data == "nav:profile")
async def profile(cb: CallbackQuery):
    async with AsyncSessionLocal() as db:
        user = await get_user_by_telegram_id(db, cb.from_user.id)
        orders_count = await get_orders_count_by_telegram_id(db, cb.from_user.id)
        total_bottles = await get_total_bottles_by_user(db, user.id) if user else 0
    phone = user.phone if user and user.phone else "‚Äî"
    text = (
        "<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"–ò–º—è: {cb.from_user.full_name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–ó–∞–∫–∞–∑—ã: <b>{orders_count}</b>\n"
        f"–û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –±—É—Ç—ã–ª–æ–∫: <b>{total_bottles}</b>"
    )
    await cb.answer()
    await send_or_edit(cb, text, profile_kb())

FAQ_TEXT = (
    "<b>‚ùì FAQ</b>\n\n"
    "‚Ä¢ <b>–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å?</b> –ù–∞–∂–º–∏—Ç–µ ¬´üõí –ö–∞—Ç–∞–ª–æ–≥¬ª.\n"
    "‚Ä¢ <b>–û–ø–ª–∞—Ç–∞?</b> –û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–∫–∞–∑ ‚Üí ¬´üí≥ –û–ø–ª–∞—Ç–∏—Ç—å¬ª.\n"
    "‚Ä¢ <b>–°—Ç–∞—Ç—É—Å?</b> –£ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: ¬´–í –æ–±—Ä–∞–±–æ—Ç–∫–µ / –í –ø—É—Ç–∏ / –û—Ç–∫–ª–æ–Ω—ë–Ω / –ó–∞–≤–µ—Ä—à—ë–Ω¬ª.\n"
    "‚Ä¢ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞?</b> ¬´üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª –≤ –º–µ–Ω—é."
)

@router.callback_query(F.data == "nav:faq")
async def faq(cb: CallbackQuery):
    await cb.answer()
    await send_or_edit(cb, FAQ_TEXT, faq_kb())

@router.callback_query(F.data == "orders:list")
async def orders_list(cb: CallbackQuery):
    async with AsyncSessionLocal() as db:
        user = await get_user_by_telegram_id(db, cb.from_user.id)
        orders = await get_orders_by_user(db, user.id) if user else []
    if not orders:
        await cb.answer()
        return await send_or_edit(cb, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.", InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üè† –ú–µ–Ω—é", callback_data="nav:menu")]]
        ))
    orders = orders[:10]
    header = "<b>üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑:"
    await cb.answer()
    await send_or_edit(cb, header, orders_list_kb(orders))

@router.callback_query(F.data.startswith("order:"))
async def order_details(cb: CallbackQuery):
    order_id = int(cb.data.split(":")[1])
    async with AsyncSessionLocal() as db:
        o = await get_order_by_id(db, order_id)
    if not o or o.telegram_id != cb.from_user.id:
        return await cb.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    await cb.answer()
    await send_or_edit(cb, order_card_text(o), order_actions_kb(o))

@router.callback_query(F.data.startswith("pay:"))
async def pay_order(cb: CallbackQuery):
    order_id = int(cb.data.split(":")[1])
    async with AsyncSessionLocal() as db:
        o = await get_order_by_id(db, order_id)
    if not o or o.telegram_id != cb.from_user.id:
        return await cb.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    if o.is_paid:
        return await cb.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω ‚úÖ", show_alert=True)
    prices = [
        LabeledPrice(
            label=f"–ó–∞–∫–∞–∑ ‚Ññ{o.id}",
            amount=int(o.total_price * 100)  # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ä—É–±–ª–∏ ‚Üí –∫–æ–ø–µ–π–∫–∏
        )
    ]
    lines = []
    for item in o.items:
        lines.append(f"{item.product.name} √ó {item.quantity}")

    description = "\n".join(lines) + f"\n–ò—Ç–æ–≥–æ: {fmt_price(o.total_price_cents)}"
    await cb.message.bot.send_invoice(
        chat_id=cb.from_user.id,
        title=f"Daim Coffee ‚Ä¢ #{o.id}",
        description=description,
        payload=f"order:{o.id}",
        provider_token=PROVIDER_TOKEN,
        currency=CURRENCY,
        prices=prices
    )
    await cb.answer()

@router.pre_checkout_query()
async def pre_checkout(pcq: PreCheckoutQuery):
    await pcq.answer(ok=True)

@router.message(F.successful_payment)
async def successful_payment(message: Message):
    payload = message.successful_payment.invoice_payload
    if not payload.startswith("order:"):
        return await message.answer("–ü–ª–∞—Ç—ë–∂ –ø–æ–ª—É—á–µ–Ω, –Ω–æ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
    order_id = int(payload.split(":")[1])
    async with AsyncSessionLocal() as db:
        await set_order_paid(db, order_id)
        o = await get_order_by_id(db, order_id)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! üéâ\n" + order_card_text(o), reply_markup=menu_kb())
