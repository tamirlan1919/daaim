from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, ReplyKeyboardRemove
from bot.database.engine import AsyncSessionLocal
from bot.database.models import Product
from sqlalchemy.future import select
from bot.database.repository import get_all_users, get_all_orders

router = Router()

# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∫—É—Å–∞ ---
class AddProduct(StatesGroup):
    waiting_for_name = State()
    waiting_for_price = State()

# --- FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫—É—Å–∞ ---
class EditProduct(StatesGroup):
    waiting_for_product = State()
    waiting_for_new_price = State()

@router.message(Command('admin'))
async def admin_panel(message: Message):
    kb = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å")],
            [types.KeyboardButton(text="üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É")],
            [types.KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), types.KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã")]
        ],
        resize_keyboard=True
    )
    await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=kb)

# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∫—É—Å–∞ ---
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∫—É—Å")
async def add_product_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∫—É—Å–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(AddProduct.waiting_for_name)

@router.message(AddProduct.waiting_for_name)
async def add_product_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö) –∑–∞ –æ–¥–Ω—É –±—É—Ç—ã–ª–∫—É:")
    await state.set_state(AddProduct.waiting_for_price)

@router.message(AddProduct.waiting_for_price)
async def add_product_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ)!")
        return
    data = await state.get_data()
    name = data['name']
    async with AsyncSessionLocal() as db:
        db.add(Product(name=name, price_cents=price*100))
        await db.commit()
    await message.answer(f"–í–∫—É—Å '{name}' –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ü–µ–Ω–æ–π {price}‚ÇΩ.", reply_markup=ReplyKeyboardRemove())
    await state.clear()

# --- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤–∫—É—Å–∞ ---
@router.message(F.text == "üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É")
async def edit_product_start(message: Message, state: FSMContext):
    async with AsyncSessionLocal() as db:
        result = await db.execute(select(Product))
        products = result.scalars().all()
    if not products:
        await message.answer("–ù–µ—Ç –≤–∫—É—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    product_names = [p.name for p in products]
    kb = types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text=name)] for name in product_names],
        resize_keyboard=True
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
    await state.set_state(EditProduct.waiting_for_product)

@router.message(EditProduct.waiting_for_product)
async def edit_product_choose(message: Message, state: FSMContext):
    await state.update_data(product_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–≤ —Ä—É–±–ª—è—Ö):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(EditProduct.waiting_for_new_price)

@router.message(EditProduct.waiting_for_new_price)
async def edit_product_price(message: Message, state: FSMContext):
    try:
        price = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—á–∏—Å–ª–æ)!")
        return
    data = await state.get_data()
    name = data['product_name']
    async with AsyncSessionLocal() as db:
        result = await db.execute(select(Product).where(Product.name == name))
        product = result.scalar_one_or_none()
        if not product:
            await message.answer("–í–∫—É—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return
        product.price_cents = price * 100
        await db.commit()
    await message.answer(f"–¶–µ–Ω–∞ –¥–ª—è '{name}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {price}‚ÇΩ.", reply_markup=ReplyKeyboardRemove())
    await state.clear()

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def show_users(message: Message):
    async with AsyncSessionLocal() as db:
        users = await get_all_users(db)
    if not users:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
        return
    text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join([f"{u.id}: {u.name or ''} (tg: {u.telegram_id})" for u in users])
    await message.answer(text)

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ ---
@router.message(F.text == "üì¶ –ó–∞–∫–∞–∑—ã")
async def show_orders(message: Message):
    async with AsyncSessionLocal() as db:
        orders = await get_all_orders(db)
    if not orders:
        await message.answer("–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
        return
    text = "–ó–∞–∫–∞–∑—ã:\n" + "\n".join([
        f"#{o.id} | {o.address} | {o.total_price_cents/100:.2f}‚ÇΩ | –û–ø–ª–∞—á–µ–Ω: {'–î–∞' if o.is_paid else '–ù–µ—Ç'}"
        for o in orders[:20]
    ])
    await message.answer(text)