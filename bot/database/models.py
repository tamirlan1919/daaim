from __future__ import annotations

from datetime import datetime
from enum import Enum

from sqlalchemy import (
    Column, Integer, String, DateTime, Boolean, ForeignKey, BigInteger,
    Enum as SAEnum
)
from sqlalchemy.orm import relationship, declarative_base

Base = declarative_base()


# -------- –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–∞ --------
class OrderStatus(str, Enum):
    processing = "processing"     # –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è / –Ω–∞ —Å–±–æ—Ä–∫–µ
    in_transit = "in_transit"     # –ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É
    declined = "declined"         # –æ—Ç–º–µ–Ω—ë–Ω / –æ—Ç–∫–ª–æ–Ω—ë–Ω
    completed = "completed"       # –¥–æ—Å—Ç–∞–≤–ª–µ–Ω / –∑–∞–≤–µ—Ä—à—ë–Ω


class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True)
    telegram_id = Column(BigInteger, unique=True, index=True, nullable=False)
    phone = Column(String)
    name = Column(String)
    created_at = Column(DateTime, default=datetime.utcnow, nullable=False)

    orders = relationship(
        'Order',
        back_populates='user',
        cascade="save-update",
        lazy="selectin",   # –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è –ª—É—á—à–µ, —á–µ–º joined, –∫–æ–≥–¥–∞ —É —é–∑–µ—Ä–∞ –º–Ω–æ–≥–æ –∑–∞–∫–∞–∑–æ–≤
    )


class Product(Base):
    __tablename__ = "products"

    id = Column(Integer, primary_key=True)
    name = Column(String, unique=True, nullable=False, index=True)
    # –¥–µ–Ω—å–≥–∏ —Ö—Ä–∞–Ω–∏–º –≤ —Ü–µ–Ω—Ç–∞—Ö/–∫–æ–ø–µ–π–∫–∞—Ö
    price_cents = Column(Integer, nullable=False)


class Order(Base):
    __tablename__ = "orders"

    id = Column(Integer, primary_key=True)
    telegram_id = Column(BigInteger, nullable=False, index=True)
    date = Column(DateTime, default=datetime.utcnow, nullable=False, index=True)
    address = Column(String, nullable=False)
    phone = Column(String, nullable=False)

    total_price_cents = Column(Integer, nullable=False, default=0)
    is_paid = Column(Boolean, default=False, nullable=False)

    # üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —Ç–∏–ø FK —Ç–µ–ø–µ—Ä—å Integer, –∫–∞–∫ –∏ users.id
    user_id = Column(Integer, ForeignKey('users.id', ondelete="SET NULL"), nullable=True)
    user = relationship('User', back_populates='orders', lazy="selectin")

    # üî• –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (ENUM –Ω–∞ —É—Ä–æ–≤–Ω–µ –ë–î)
    status = Column(
        SAEnum(OrderStatus, name="order_status", create_constraint=True),
        nullable=False,
        default=OrderStatus.processing,
    )

    items = relationship(
        "OrderItem",
        back_populates="order",
        cascade="all, delete-orphan",
        lazy="selectin",
    )


class OrderItem(Base):
    __tablename__ = "order_items"

    id = Column(Integer, primary_key=True)
    order_id = Column(Integer, ForeignKey("orders.id", ondelete="CASCADE"), nullable=False, index=True)
    product_id = Column(Integer, ForeignKey("products.id", ondelete="RESTRICT"), nullable=False, index=True)

    quantity = Column(Integer, nullable=False)          # —Å–∫–æ–ª—å–∫–æ –µ–¥–∏–Ω–∏—Ü –ø–æ–∑–∏—Ü–∏–∏
    unit_price_cents = Column(Integer, nullable=False)  # —Ü–µ–Ω–∞ –∑–∞ 1 –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞
    line_total_cents = Column(Integer, nullable=False)  # quantity * unit_price_cents

    order = relationship("Order", back_populates="items", lazy="selectin")
    product = relationship("Product", lazy="selectin")
